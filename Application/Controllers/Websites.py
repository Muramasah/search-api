from Domain.UseCases.FindWebsitesByQuery import FindWebsitesByQuery
from Domain.UseCases.IndexWebsite import IndexWebsite
from flask_restful import Resource, reqparse

# Parser for PUT requests
put_parser = reqparse.RequestParser(bundle_errors=True)

put_parser.add_argument('text', type=str, required=True)
put_parser.add_argument('url', type=str, required=True)
put_parser.add_argument('title', type=str, required=True)

# Parser for GET requests
get_parser = reqparse.RequestParser(bundle_errors=True)

get_parser.add_argument('query', type=str, required=True)


class Websites(Resource):
    '''Works as coordinator to use cases that affects to Website resources'''

    def __init__(self, index_website: IndexWebsite, find_sites_by_query: FindWebsitesByQuery):
        self.__index_website = index_website
        self.__find_sites_by_query = find_sites_by_query

    def options(self):
        return {'Allow': 'OPTIONS, GET, PUT'}, 200

    def put(self):
        # Instead of using arguments directly, Data Transfer Objects can be
        # used. The validation done in the current model, should be done in the
        # DTO creator service, and should be fail before enter into the domain.
        arguments = put_parser.parse_args()

        self.__index_website.execute(arguments)
        # This message should be generated by the domain in a notification
        # service.
        return f'Text content from {arguments["title"]} indexed successfully', 201

    def get(self):
        arguments = get_parser.parse_args()

        # To avoid breaking with the commander patter, a event comunication
        # system should be implemented, such as domain events. For now there is
        # no other need for it.
        visited_sites = self.__find_sites_by_query.execute(arguments)

        return visited_sites, 200
